# -*- coding: utf-8 -*-
"""Core Learning Algorithm- Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18jCl9w-ObSEk9TuaIiCzILtl7IjxfH-d

We need to predict the flower as below from some properties.
1. Laliguras
2. Suryamukhi
3. Rose

As above they all have properties like sepal and petal's length and widht.
We need to classify the flower from the dataset given as above.
"""

from __future__ import absolute_import,division,print_function,unicode_literals
import tensorflow as tf
import pandas as pd
csv_attribute=['SepalWidth','SepalLength','PetalLength','PetalWidth','Species']
species=['Laliguras','Suryamukhi','Rose']

trainDataPath=tf.keras.utils.get_file(
    "iris_training.csv","https://storage.googleapis.com/download.tensorflow.org/data/iris_training.csv")
testDataPath=tf.keras.utils.get_file(
    "iris_test.csv","https://storage.googleapis.com/download.tensorflow.org/data/iris_test.csv")
trainData=pd.read_csv(trainDataPath, names=csv_attribute,header=0)
testData=pd.read_csv(testDataPath, names=csv_attribute,header=0)

trainData_y=trainData.pop('Species') #Finding of the DataSet
testData_y=testData.pop('Species')#Finding of the DataSet

trainData.head()
# testData.head()

def input_fn(features,labels,training=True,batch_size=256):
  dataset=tf.data.Dataset.from_tensor_slices((dict(features),labels))
  if training:
    dataset=dataset.shuffle(1000).repeat()
  return dataset.batch(batch_size)

feature_columns=[]
for key in trainData.keys():
  feature_columns.append(tf.feature_column.numeric_column(key=key))
print(feature_columns)

#Main Running classification model
from __future__ import absolute_import,division,print_function,unicode_literals
import tensorflow as tf
import pandas as pd
csv_attribute=['SepalWidth','SepalLength','PetalLength','PetalWidth','Species']
species=['Laliguras','Suryamukhi','Rose']

trainDataPath=tf.keras.utils.get_file(
    "iris_training.csv","https://storage.googleapis.com/download.tensorflow.org/data/iris_training.csv")
testDataPath=tf.keras.utils.get_file(
    "iris_test.csv","https://storage.googleapis.com/download.tensorflow.org/data/iris_test.csv")
trainData=pd.read_csv(trainDataPath, names=csv_attribute,header=0)
testData=pd.read_csv(testDataPath, names=csv_attribute,header=0)
trainData_y=trainData.pop('Species') #Finding of the DataSet
testData_y=testData.pop('Species')#Finding of the DataSet
def input_fn(features,labels,training=True,batch_size=256):
  dataset=tf.data.Dataset.from_tensor_slices((dict(features),labels))
  if training:
    dataset=dataset.shuffle(1000).repeat()
  return dataset.batch(batch_size)
feature_columns=[]
for key in trainData.keys():
  feature_columns.append(tf.feature_column.numeric_column(key=key))

# Yo veneko chai k ho vanda 
# featrue columns takes the columns hidden units are the nodes with all layers and n classes are the category of species in this case
classifier=tf.estimator.DNNClassifier(
    feature_columns=feature_columns,
    hidden_units=[30,10],
    n_classes=3) 
classifier.train(
    input_fn=lambda:input_fn(trainData,trainData_y,training=True),steps=5000
)
#Testing Test Dataset accuracy
result=classifier.evaluate(input_fn=lambda:input_fn(testData,testData_y,training=False))
#Performing Prediction
def new_inp_fn(features,batch_size=256):
  return tf.data.Dataset.from_tensor_slices(dict(features)).batch(batch_size)
features=['SepalWidth','SepalLength','PetalLength','PetalWidth']
predict={}
print("Enter the flower information: ")
for f in features:
  valid=True
  while valid:
    val=input(f+": ")
    if not val.isdigit(): valid=False
  predict[f]= [float(val)]
prediction=classifier.predict(new_inp_fn=lambda: new_inp_fn(predict))
# print(prediction)
# Ramro para ma dekhaune 
for p in prediction:
  print("Class is {}",p['class_ids'][0])
  print("Probablity of being this class is {}",p['probabilities'][0]*100)



#Performing Prediction
def input_fn(features,batch_size=256):
  return tf.data.Dataset.from_tensor_slices(dict(features)).batch(batch_size)
features=['SepalWidth','SepalLength','PetalLength','PetalWidth']
predict={}
print("Enter the flower information: ")
for f in features:
  valid=True
  while valid:
    val=input(f+": ")
    if not val.isdigit(): valid=False
  predict[f]= [float(val)]
prediction=classifier.predict(input_fn=lambda: input_fn(predict))

for p in prediction:
  print("Class is "+species[p['class_ids'][0]])
  a=p['probabilities'][p['class_ids']]*100
  print("Probablity of being this class is "+str(a))

# print(prediction)
# Ramro para ma dekhaune