# -*- coding: utf-8 -*-
"""Core Learning Algorithm- Linear Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t9VKjATRdnYOf1a8-kbySlQmatgCapyX
"""

!pip install -q sklearn

from __future__ import absolute_import,division,print_function,unicode_literals
import numpy as mp
import pandas as pd
import matplotlib.pyplot as plt
from IPython.display import clear_output
from six.moves import urllib
import tensorflow.compat.v2.feature_column as fc
import tensorflow as tf

dftrain=pd.read_csv('http://storage.googleapis.com/tf-datasets/titanic/train.csv')
dfeval=pd.read_csv('http://storage.googleapis.com/tf-datasets/titanic/eval.csv')
y_train=dftrain.pop('survived')
y_eval=dfeval.pop('survived')
dftrain.head()
dfeval.head()

#Some numpy thing
print(dftrain.loc[0])
print(dftrain["embark_town"])

print(dftrain["fare"].describe())
print(dftrain.describe())

#People age dying in titnaic
dftrain.age.hist(bins=20)

#people dying in gender
dftrain.sex.value_counts().plot(kind='barh')

#people dying in Class
dftrain['class'].value_counts().plot(kind='barh')

# Esle chai categorical data lai array ma implement garxa
dftrain=pd.read_csv('http://storage.googleapis.com/tf-datasets/titanic/train.csv')
dfeval=pd.read_csv('http://storage.googleapis.com/tf-datasets/titanic/eval.csv')
y_train=dftrain.pop('survived')
y_eval=dfeval.pop('survived')
categoryType=['sex','n_siblings_spouses','parch','class','deck','embark_town','alone']
numberType=['age','fare']
featureAtt=[]
for c in categoryType:
  vocab=dftrain[c].unique()
  featureAtt.append(tf.feature_column.categorical_column_with_vocabulary_list(c,vocab))

for n in numberType:
  featureAtt.append(tf.feature_column.numeric_column(n,dtype=tf.float32))
print(featureAtt)

#VVVVVVVI
def make_input_fn(data_df,label_df,num_epochs=10,shuffle=True,batch_size=32):
  def input_function():
    ds = tf.data.Dataset.from_tensor_slices((dict(data_df),label_df))
    if shuffle:
      ds=ds.shuffle(1000)
    ds=ds.batch(batch_size).repeat(num_epochs)
    return ds
  return input_function
train_input_fn=make_input_fn(dftrain,y_train) #ytrain nikalne gari train data lai block block ma input linxa
eval_input_fn=make_input_fn(dfeval,y_eval,num_epochs=1,shuffle=False) # Final test garda ko input

#Main Model Creation

linear_estimation=tf.estimator.LinearClassifier(feature_columns=featureAtt)
linear_estimation.train(train_input_fn)
result=linear_estimation.evaluate(eval_input_fn)

clear_output()

print(result)

#Prediction(Vabisyawani)
result = list(linear_estimation.predict(eval_input_fn))

print(dfeval.loc[4]) #Locating the person data
print(y_eval.loc[4]) #locating the person surviving data
print(result[4]['probabilities'][1]) #Surviving probability from model